NGINX-HASKELL
An nginx module for writing request handlers in Haskell

EXAMPLE
Nginx configuration:
    server {
        # ...
        location ~ / {
            haskell MyHaskellModule handler;
        }
    }

Haskell module:
    module MyHaskellModule where

    import qualified Nginx.Core as Nginx
    import qualified Nginx.HTTP sa Nginx

    handler :: Nginx.Request -> IO Nginx.Response
    handler = ...

    foreign export ccall handler :: Nginx.Request -> IO Nginx.Response

IMPLEMENTATION
Currently, the implementation plan involves 3 main pieces:
    o A core NGINX module in C
    o Some Haskell FFI glue to be statically compiled into the core module
    o A collection of modules for writing dynamically Haskell libraries

The user of the module is expected to write dynamic Haskell libraries that use
the `{-# ForeignFunctionInterface #-}` language extension to expose request
handlers and middlewares using `foreign export`.

The types of the exported functions, as well as utilities for working with
these, will be imported from the Haskell modules defined here.

The objective is to use WAI requests and responses to in order to use the
existing ecosystem around them.

CURRENT STATE
In order to build, the NGINX module's `config` file is generated by cabal using
`Setup.hs` to copy out the linker flags for the library dependencies.  This also
builds the dynamic `libNginxHS.so` library. The rest of build process should be
carried out by NGINX's own Makefiles (apart from one manual hack that still
remains):

    o Run the make target for haskell/libNginxHS.so
    o 
    o `./auto/configure` nginx with the `--add-module=<path-to-haskell-module>`
      flag
    o HACK: remove the libCFFI linker flag
    o Run `make` from within the `nginx` sources.

There are some unsolved problems with this process. We shouldn't have to
manually remove the libCFFI linker flag. The libraries are linked with a
"-ghc8.2.2" suffix. This obviously only works for a specific version of GHC so
needs to be parsed out of the LocalBuildInfo record.
